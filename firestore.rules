
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Barbers can be read by anyone to allow booking.
    // Only the barber can write to their own profile.
    match /barbers/{barberId} {
      allow read: if true;
      allow write: if isOwner(barberId);

      // Appointments subcollection
      match /appointments/{appointmentId} {
        // A client can create an appointment for themselves.
        allow create: if request.auth.uid == request.resource.data.clientUid;
        
        // The barber can manage their entire schedule.
        // A client can read or delete their own appointment.
        allow read, update, delete: if isOwner(barberId) || isOwner(resource.data.clientUid);
      }
    }
    
    // This rule allows the client dashboard to query the 'appointments' collection
    // group to find all appointments for the currently logged-in user.
    match /{path=**}/appointments/{appointmentId} {
        allow list: if request.auth != null && request.query.where.size() > 0 && request.query.where[0].field == 'clientUid' && request.query.where[0].value == request.auth.uid;
    }

    // A client can only manage their own data.
    match /clients/{clientId} {
      allow read, write: if isOwner(clientId);
    }
  }
}
