
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- FUNÇÕES AUXILIARES ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // --- REGRAS PARA BARBEIROS ---
    match /barbers/{barberId} {
      allow read: if resource.data.profileComplete == true || isOwner(barberId);
      allow create, update: if isOwner(barberId);
      allow delete: if false;

      // REGRAS PARA AGENDAMENTOS (SUBCOLEÇÃO DE BARBEIROS)
      match /appointments/{appointmentId} {
        // Um cliente só pode criar um agendamento para si mesmo.
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.clientUid;
        
        // Apenas o barbeiro pode atualizar ou deletar.
        allow update, delete: if isOwner(barberId);
        
        // Leitura de um único documento: permitido para o barbeiro ou o cliente do agendamento.
        allow get: if isOwner(barberId) || (isSignedIn() && request.auth.uid == resource.data.clientUid);
        
        // Leitura de lista (queries): Permitido se a consulta filtrar por clientUid.
        // Isso resolve o problema do collectionGroup no dashboard do cliente.
        allow list: if isSignedIn() && request.query.get('where')[0][0] == 'clientUid' && request.query.get('where')[0][2] == request.auth.uid;
      }
    }

    // --- REGRAS PARA CLIENTES ---
    match /clients/{clientId} {
        allow read, create, update: if isOwner(clientId);
        allow delete: if false;
    }
  }
}
